diff a/DirectX_Frame/DirectX_Frame/cSkinnedMesh.cpp b/DirectX_Frame/DirectX_Frame/cSkinnedMesh.cpp	(rejected hunks)
@@ -154,77 +154,10 @@
 	if (pBone->pMeshContainer)
 	{
 		ST_BONE_MESH* pBoneMesh = (ST_BONE_MESH*)pBone->pMeshContainer;
-
-		// get bone combinations
-		LPD3DXBONECOMBINATION pBoneCombos =
-			(LPD3DXBONECOMBINATION)(pBoneMesh->pBufBoneCombos->GetBufferPointer());
-
-		D3DXMATRIXA16 matViewProj, matView, matProj;
-		g_pD3DDevice->GetTransform(D3DTS_VIEW, &matView);
-		g_pD3DDevice->GetTransform(D3DTS_PROJECTION, &matProj);
-		matViewProj = matView * matProj;
-
-		D3DXMATRIXA16 mView, mInvView;
-		g_pD3DDevice->GetTransform(D3DTS_VIEW, &mView);
-		D3DXMatrixInverse(&mInvView, 0, &mView);
-		D3DXVECTOR3 vEye = D3DXVECTOR3(0, 0, 0);
-		D3DXVec3TransformCoord(&vEye, &vEye, &mInvView);
-
-		// for each palette
-		for (DWORD dwAttrib = 0; dwAttrib < pBoneMesh->dwNumAttrGroups; ++dwAttrib)
-		{
-			// set each transform into the palette
-			for (DWORD dwPalEntry = 0; dwPalEntry < pBoneMesh->dwNumPaletteEntries; ++dwPalEntry)
-			{
-				DWORD dwMatrixIndex = pBoneCombos[dwAttrib].BoneId[dwPalEntry];
-				if (dwMatrixIndex != UINT_MAX)
-				{
-					m_pmWorkingPalette[dwPalEntry] =
-						pBoneMesh->pBoneOffsetMatrices[dwMatrixIndex] *
-						(*pBoneMesh->ppBoneMatrixPtrs[dwMatrixIndex]);
-				}
-			}
-
-			// set the matrix palette into the effect
-			m_pEffect->SetMatrixArray("amPalette",
-				m_pmWorkingPalette,
-				pBoneMesh->dwNumPaletteEntries);
-
-			m_pEffect->SetMatrix("g_mViewProj", &matViewProj);
-			m_pEffect->SetVector("vLightDiffuse", &D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f));
-			m_pEffect->SetVector("vWorldLightPos", &D3DXVECTOR4(500.0f, 500.0f, 500.0f, 1.0f));
-			m_pEffect->SetVector("vWorldCameraPos", &D3DXVECTOR4(vEye, 1.0f));
-			m_pEffect->SetVector("vMaterialAmbient", &D3DXVECTOR4(0.53f, 0.53f, 0.53f, 0.53f));
-			m_pEffect->SetVector("vMaterialDiffuse", &D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f));
-
-			// we're pretty much ignoring the materials we got from the x-file; just set
-			// the texture here
-			m_pEffect->SetTexture("g_txScene", pBoneMesh->vecTexture[pBoneCombos[dwAttrib].AttribId]);
-
-			// set the current number of bones; this tells the effect which shader to use
-			m_pEffect->SetInt("CurNumBones", pBoneMesh->dwMaxNumFaceInfls - 1);
-
-			// set the technique we use to draw
-			m_pEffect->SetTechnique("Skinning20");
-
-			UINT uiPasses, uiPass;
-
-			// run through each pass and draw
-			m_pEffect->Begin(&uiPasses, 0);
-			for (uiPass = 0; uiPass < uiPasses; ++uiPass)
-			{
-				m_pEffect->BeginPass(uiPass);
-				pBoneMesh->pWorkingMesh->DrawSubset(dwAttrib);
-				m_pEffect->EndPass();
-			}
-			m_pEffect->End();
-		}
-	}
-
-	//��������� ��� �����ӿ� ���ؼ� ����.
-	if (pBone->pFrameSibling)
-	{
-		Render((ST_BONE*)pBone->pFrameSibling);
+		g_pD3DDevice->SetTransform(D3DTS_WORLD, &pBone->CombinedTransformationMatrix);
+		g_pD3DDevice->SetMaterial(&(pBoneMesh->pMaterials->MatD3D));
+		g_pD3DDevice->SetTexture(0, g_pTexture->GetTexture(pBoneMesh->pMaterials->pTextureFilename));
+		pBoneMesh->pWorkingMesh->DrawSubset(0);
 	}
 
 	if (pBone->pFrameFirstChild)
